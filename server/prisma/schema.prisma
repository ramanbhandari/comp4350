// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// DATABASE PROVIDER
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgcrypto]
}

// ─── USER MODEL ─────────────────────────────────────────────────────────────
model User {
  id        Int      @id @default(autoincrement())  // Auto-incrementing ID
  email     String   @unique
  fullName  String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdTrips Trip[]        @relation("TripCreator")  // Trips created by user
  tripMembers  TripMember[]  // Trips where the user is a member
  tripInvites  TripInvitee[] // Trips where the user is invited

  expenses     Expense[]
  messages     Message[]
  polls        Poll[]
  packingItems PackingItem[]
  ExpenseShare ExpenseShare[]
}

// ─── TRIP MODEL ─────────────────────────────────────────────────────────────
model Trip {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  destination String
  startDate   DateTime
  endDate     DateTime
  budget      Float?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy   Int
  creator     User     @relation(name: "TripCreator", fields: [createdBy], references: [id])

  members     TripMember[]
  invitees    TripInvitee[]
  stays       Stay[]

  expenses    Expense[]
  itineraries Itinerary[]
  messages    Message[]
  polls       Poll[]
  packingList PackingItem[]
}

// ─── TRIP MEMBER MODEL ──────────────────────────────────────────────────────
model TripMember {
  trip   Trip   @relation(fields: [tripId], references: [id])
  tripId Int
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  role   String @default("member") //member, creator

  @@id([tripId, userId])
}

// ─── TRIP INVITEE MODEL ─────────────────────────────────────────────────────
model TripInvitee {
  trip   Trip   @relation(fields: [tripId], references: [id])
  tripId Int
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  status String @default("pending") // pending, accepted, declined

  @@id([tripId, userId])
}

// ─── STAY MODEL (ACCOMMODATION FOR TRIP MEMBERS) ───────────────────────────
model Stay {
  id          Int      @id @default(autoincrement())
  tripId      Int
  trip        Trip     @relation(fields: [tripId], references: [id])
  name        String   // e.g., "Hilton Hotel"
  address     String?  // Optional for flexibility
  checkInDate DateTime
  checkOutDate DateTime
  bookedBy    User?    @relation(fields: [bookedById], references: [id])
  bookedById  Int?
  url         String?  // Optional field for accommodation website/booking link
}

// ─── EXPENSE MODEL ─────────────────────────────────────────────────────────
model Expense {
  id          Int      @id @default(autoincrement())
  amount      Float
  category    String
  description String?
  createdAt   DateTime @default(now())

  trip     Trip   @relation(fields: [tripId], references: [id])
  tripId   Int
  paidBy   User   @relation(fields: [paidById], references: [id])
  paidById Int

  shares ExpenseShare[]
}

// ─── EXPENSE SHARE MODEL ────────────────────────────────────────────────────
model ExpenseShare {
  expense   Expense @relation(fields: [expenseId], references: [id])
  expenseId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  share     Float
  settled   Boolean @default(false)

  @@id([expenseId, userId])
}

// ─── ITINERARY MODEL ────────────────────────────────────────────────────────
model Itinerary {
  id          Int      @id @default(autoincrement())
  trip        Trip     @relation(fields: [tripId], references: [id])
  tripId      Int
  date        DateTime
  title       String
  description String
  location    String?
  assignedTo  Int?
  createdAt   DateTime @default(now())
}

// ─── MESSAGE MODEL ──────────────────────────────────────────────────────────
model Message {
  id        Int      @id @default(autoincrement())
  content   String
  trip      Trip     @relation(fields: [tripId], references: [id])
  tripId    Int
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  Int
  createdAt DateTime @default(now())
}

// ─── POLL MODEL ────────────────────────────────────────────────────────────
model Poll {
  id          Int      @id @default(autoincrement())
  question    String
  options     Json // Stores { option: string, votes: string[] }[]
  trip        Trip     @relation(fields: [tripId], references: [id])
  tripId      Int
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById Int
  createdAt   DateTime @default(now())
}

// ─── PACKING LIST MODEL ─────────────────────────────────────────────────────
model PackingItem {
  id         Int      @id @default(autoincrement())
  name       String
  quantity   Int      @default(1)
  packed     Boolean  @default(false)
  assignedTo Int?
  trip       Trip     @relation(fields: [tripId], references: [id])
  tripId     Int
  createdAt  DateTime @default(now())
  User       User?    @relation(fields: [userId], references: [id])
  userId     Int?
}