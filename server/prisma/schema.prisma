// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DIRECT_URL")
  extensions = [pgcrypto]
}

model User {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email     String   @unique
  fullName  String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdTrips Trip[]
  tripMembers  TripMember[]
  expenses     Expense[]
  messages     Message[]
  polls        Poll[]
  packingItems PackingItem[]
  ExpenseShare ExpenseShare[]
}

model Trip {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  destination String
  startDate   DateTime
  endDate     DateTime
  budget      Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy   String        @db.Uuid
  creator     User          @relation(fields: [createdBy], references: [id])
  members     TripMember[]
  expenses    Expense[]
  itineraries Itinerary[]
  messages    Message[]
  polls       Poll[]
  packingList PackingItem[]
}

model TripMember {
  trip   Trip   @relation(fields: [tripId], references: [id])
  tripId Int
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid
  role   String @default("member")

  @@id([tripId, userId])
}

model Expense {
  id          Int      @id @default(autoincrement())
  amount      Float
  category    String
  description String?
  createdAt   DateTime @default(now())

  trip     Trip   @relation(fields: [tripId], references: [id])
  tripId   Int
  paidBy   User   @relation(fields: [paidById], references: [id])
  paidById String @db.Uuid

  shares ExpenseShare[]
}

model ExpenseShare {
  expense   Expense @relation(fields: [expenseId], references: [id])
  expenseId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.Uuid
  share     Float
  settled   Boolean @default(false)

  @@id([expenseId, userId])
}

model Itinerary {
  id          Int      @id @default(autoincrement())
  trip        Trip     @relation(fields: [tripId], references: [id])
  tripId      Int
  date        DateTime
  title       String
  description String
  location    String?
  assignedTo  String?  @db.Uuid
  createdAt   DateTime @default(now())
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  trip      Trip     @relation(fields: [tripId], references: [id])
  tripId    Int
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String   @db.Uuid
  createdAt DateTime @default(now())
}

model Poll {
  id          Int      @id @default(autoincrement())
  question    String
  options     Json // Stores { option: string, votes: string[] }[]
  trip        Trip     @relation(fields: [tripId], references: [id])
  tripId      Int
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String   @db.Uuid
  createdAt   DateTime @default(now())
}

model PackingItem {
  id         Int      @id @default(autoincrement())
  name       String
  quantity   Int      @default(1)
  packed     Boolean  @default(false)
  assignedTo String?  @db.Uuid
  trip       Trip     @relation(fields: [tripId], references: [id])
  tripId     Int
  createdAt  DateTime @default(now())
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?  @db.Uuid
}
